% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper.R
\name{triebars}
\alias{triebars}
\title{create an instance of TriEBARS}
\usage{
triebars(
  x,
  y,
  gamma = 1,
  c = 0.3,
  times_1 = 3,
  times_2 = 3,
  times_3 = 3,
  k_1 = -1,
  k_2 = -1,
  k_3 = -1,
  n_1 = -1,
  n_2 = -1,
  n_3 = -1,
  degree_1 = 3,
  degree_2 = 3,
  degree_3 = 3,
  intercept_1 = TRUE,
  intercept_2 = TRUE,
  intercept_3 = TRUE
)
}
\arguments{
\item{x}{a numeric matrix, (m,3), each row indicates a predictor value (x_1,x_2,x_3).}

\item{y}{a numeric vector, indicates the response values,
the same length as x's rows.}

\item{gamma}{double, the exponent in extended BIC, default value is \code{1.0}.
It should be contained in \verb{[0,1]} (Nevertheless, outside is valid).}

\item{c}{double, the constant affects the proposal distribution in MCMC,
default value is \code{0.3}. It has to be contained in \verb{[0,1]}.}

\item{times_1}{double, decides the number of all potential knots in x_1 if \code{n_1<0}.
In this case, \code{n_1} is \code{length(x) * times}, default value is \code{3.0}.}

\item{times_2}{double, similar to \code{times_1} but in x_2, default value is \code{3.0}.}

\item{times_3}{double, similar to \code{times_1} but in x_3, default value is \code{3.0}.}

\item{k_1}{int, the number of knots in x_1 is fixed if \code{k_1>0}. Otherwise \code{k_1} will
be estimated in the algorithm, default value is \code{-1}.}

\item{k_2}{int, the number of knots in x_2 is fixed if \code{k_2>0}. Otherwise \code{k_2} will
be estimated in the algorithm, default value is \code{-1}.}

\item{k_3}{int, the number of knots in x_3 is fixed if \code{k_3>0}. Otherwise \code{k_3} will
be estimated in the algorithm, default value is \code{-1}.}

\item{n_1}{int, the number of all potential knots in x_1, default value is \code{-1}.}

\item{n_2}{int, similar to \code{n_1} but in x_2, default value is \code{-1}.}

\item{n_3}{int, similar to \code{n_1} but in x_3, default value is \code{-1}.}

\item{degree_1}{int, the degree of polynomial spline in x_1, default value is \code{3}.}

\item{degree_2}{int, the degree of polynomial spline in x_2, default value is \code{3}.}

\item{degree_3}{int, the degree of polynomial spline in x_3, default value is \code{3}.}

\item{intercept_1}{bool, whether the intercept is included in the basis in x_1,
default value is \code{TRUE}.}

\item{intercept_2}{bool, whether the intercept is included in the basis in x_2,
default value is \code{TRUE}.}

\item{intercept_3}{bool, whether the intercept is included in the basis in x_3,
default value is \code{TRUE}.}
}
\value{
an exposed R class of cpp class called TriEBARS.
}
\description{
see \link{ClassTriEBARS} for more details about class TriEBARS
}
\examples{
library(EBARS)
library(splines)
set.seed(1234)
#tensor spline
beta = matrix(rnorm(200,0,1),ncol=1)
fss <- function(x,y,z){
  xix = c(0.2,0.3)
  xiy = c(0.5,0.5,0.5,0.5,0.7)
  xiz = c(0.4,0.6)
  B = tri_tensor_spline(cbind(x,y,z),xix,xiy,xiz)
  return(B\%*\%beta)
}
# parameters' configuration
m_train = 1000; m_test = 200
burns = 1000; steps = 1000
noise = 0.1
# generate train data set
x_1 = c(runif(m_train-2,0,1),0,1)
x_2 = c(runif(m_train-2,0,1),0,1)
x_3 = c(runif(m_train-2,0,1),0,1)
y = fss(x_1,x_2,x_3)
y_h = y + rnorm(m_train,0,noise)
# generate test set
x_1_new = runif(m_test,0,1)
x_2_new = runif(m_test,0,1)
x_3_new = runif(m_test,0,1)
y_new = fss(x_1_new,x_2_new,x_3_new)
# run cube EBARS
time_start = Sys.time()
my_triebars = triebars(cbind(x_1,x_2,x_3), y_h)
my_triebars$mcmc(10,10)
time_end = Sys.time()
time_end - time_start
y_hat = my_triebars$predict(cbind(x_1_new,x_2_new,x_3_new))
sum((y_new-y_hat)^2)/m_test

}
